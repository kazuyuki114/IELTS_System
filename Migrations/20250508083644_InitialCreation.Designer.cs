// <auto-generated />
using System;
using System.Text.Json;
using IELTS_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IELTS_System.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250508083644_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IELTS_System.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<string>("AlternativeAnswers")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("alternative_answers");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("correct_answer");

                    b.Property<string>("Explanation")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("explanation");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("answers", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<JsonDocument>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<int>("Marks")
                        .HasColumnType("integer")
                        .HasColumnName("marks");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("question_number");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.HasKey("QuestionId");

                    b.HasIndex("SectionId");

                    b.ToTable("questions", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<string>("Instructions")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("instructions");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid")
                        .HasColumnName("part_id");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("question_type");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("section_number");

                    b.HasKey("SectionId");

                    b.HasIndex("PartId");

                    b.ToTable("sections", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.Property<string>("AudioPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("audio_path");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("test_name");

                    b.Property<Guid>("TestTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_type_id");

                    b.HasKey("TestId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("tests", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.TestPart", b =>
                {
                    b.Property<Guid>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("part_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("description");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer")
                        .HasColumnName("part_number");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.Property<string>("Title")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("title");

                    b.HasKey("PartId");

                    b.HasIndex("TestId");

                    b.ToTable("test_parts", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.TestType", b =>
                {
                    b.Property<Guid>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("test_type_id");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("description");

                    b.Property<string>("Instructions")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("integer")
                        .HasColumnName("total_marks");

                    b.HasKey("TestTypeId");

                    b.ToTable("test_types", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfileImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_image_path");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_role");

                    b.HasKey("UserId");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.UserResponse", b =>
                {
                    b.Property<Guid>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("response_id");

                    b.Property<int>("MarksRewarded")
                        .HasColumnType("integer")
                        .HasColumnName("marks_rewarded");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("user_answer");

                    b.Property<Guid>("UserTestId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_test_id");

                    b.HasKey("ResponseId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserTestId");

                    b.ToTable("user_responses");
                });

            modelBuilder.Entity("IELTS_System.Models.UserTest", b =>
                {
                    b.Property<Guid>("UserTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_test_id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Feedback")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("feedback");

                    b.Property<int>("NumCorrectAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("num_correct_answer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserTestId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("user_tests", "public");
                });

            modelBuilder.Entity("IELTS_System.Models.Answer", b =>
                {
                    b.HasOne("IELTS_System.Models.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("IELTS_System.Models.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IELTS_System.Models.Question", b =>
                {
                    b.HasOne("IELTS_System.Models.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("IELTS_System.Models.Section", b =>
                {
                    b.HasOne("IELTS_System.Models.TestPart", "TestPart")
                        .WithMany("Sections")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestPart");
                });

            modelBuilder.Entity("IELTS_System.Models.Test", b =>
                {
                    b.HasOne("IELTS_System.Models.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("IELTS_System.Models.TestPart", b =>
                {
                    b.HasOne("IELTS_System.Models.Test", "Test")
                        .WithMany("TestParts")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("IELTS_System.Models.UserResponse", b =>
                {
                    b.HasOne("IELTS_System.Models.Question", "Question")
                        .WithMany("UserResponses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IELTS_System.Models.UserTest", "UserTest")
                        .WithMany("UserResponses")
                        .HasForeignKey("UserTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserTest");
                });

            modelBuilder.Entity("IELTS_System.Models.UserTest", b =>
                {
                    b.HasOne("IELTS_System.Models.Test", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IELTS_System.Models.User", "User")
                        .WithMany("UserTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IELTS_System.Models.Question", b =>
                {
                    b.Navigation("Answer");

                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("IELTS_System.Models.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("IELTS_System.Models.Test", b =>
                {
                    b.Navigation("TestParts");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("IELTS_System.Models.TestPart", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("IELTS_System.Models.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("IELTS_System.Models.User", b =>
                {
                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("IELTS_System.Models.UserTest", b =>
                {
                    b.Navigation("UserResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
